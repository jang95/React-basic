서버 사이드 렌더링은 UI를 서버에서 렌더링하는 것을 의미
앞에서 만든 리액트 프로젝트는 기본적으로 클라이언트 사이드 렌더링

장점: 구글, 네이버, 다음 등의 검색 엔진이 우리가 만든 웹 애플리케이션의 페이지를 원활하게 수집할 수 있음
=> 리액트로 만든 SPA는 검색 엔진 크롤러 봇처럼 자바스크립트가 실행되지 않는 환경에서는 페이지가 제대로 나타나지 않음
   따라서 서버에서 클라이언트 대신 렌더링을 해 주면 검색 엔진이 페이지의 내용을 제대로 수집해 갈 수 있음

   초기 렌더링 성능 개선
  => 자바스크립트 파일 다운로드가 완료되지 않은 시점이라도 사용자가 볼 수 있는 컨텐츠가 있기 때문에 대기 시간 최소화

단점: 원래 브라우저가 해야 할 일을 서버가 대신 처리하는 것이므로 서버 리소스가 사용된다는 단점
      따라서 사용자가 많은 서비스라면 캐싱과 로드 밸런싱을 통해 성능을 최적화해 주어야 함
      
      프로젝트의 구조가 복잡해질 수 있고
      데이터 미리 불러오기, 코드 스플리팅과 호환 등 고려해야 할 사항이 더 많아져 개발이 어려워 질 수 있음


* 서버 사이드 렌더링과 코드 스플리팅 충돌

  Loadable Components 라이브러리에서 제공하는 기능을 써서 서버 사이드 렌더링 후 필요한 파일의 경로를 추출하여 렌더링 결과에 스크립트/스타일 태그 삽입해 주는 방법


렌더러용 엔트리
-> 엔트리(entry)는 웹팩에서 프로젝트를 불러올 때 가장 먼저 불러오는 파일

- 웹팩의 로더는 파일을 불러올 때 확장자에 맞게 필요한 처리를 진행

자바스크립트는 babel을 사용하여 트랜스파일링을 해주고, css는 모든 css코드를 결합해주며, 이미지 파일을 다른 경로에 따로 저장하고
그 파일에 대한 경로를 자바스크립트에서 참조할 수 있게 해 줍니다.