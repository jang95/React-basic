[1.2.1 Virtual DOM]

리액트의 주요 특징 중 하나는 Virtual DOM을 사용하는 것

[1.2.1.1 DOM이란?]

DOM은 Document Object Model의 약어, 즉 객체로 문서 구조를 표현하는 방법으로 XML이나 HTML로 작성

웹 브라우저는 DOM을 활용하여 객체에 자바스크립트와 CSS를 적용
DOM은 트리 형태아서 특정 노드를 찾거나 수정하거나 제거하거나 원하는 곳에 삽입 가능한


- DOM은 과연 느릴까요?

DOM에는 치명적인 한 가지 문제점이 있습니다. 바로 동적 UI에 최적화 되어 있지 않다는 것입니다.
HTML은 자체적으로 '정적'입니다. <자바스크립트>를 사용하여 이를 '동적'으로 만들 수 있음

_but 요즘 흔히 접하는 큰 규모의 웹 애플리케이션을 생각한다면, DOM에 직접 접근하여 변화를 주다 보면 성능 이슈가 발생합니다.

요즘 자바스크립트 엔진은 빠른 반면, DOM은 느리다... 라고 하는데 정확한 것이 아닙니다.
DOM 자체는 빠릅니다. DOM 자체를 읽고 쓸 때의 성능은 자바스크립트 객체를 처리할 때의 성능과 비교하여 다르지 않습니다.
단, 웹 브라우저 단에서 DOM에 변화가 일어나면 웹 브라우저가 CSS를 다시 연산하고, 레이아웃을 구성하고, 페이지를 리페인트 합니다.
=> 위의 과정에서 시간이 허비되는 것입니다.

<<해결법>>
 - 리액트는 Virtual DOM 방식을 사용하여 DOM의 업데이트를 추상화함으로써 DOM 처리 횟수를 최소화하고 효율적으로 진행합니다.


[1.2.1.2 Virtual DOM]
Virtual DOM]을 사용하면 실제 DOM에 접근하여 조작하는 대신, 이를 추상화한 자바스크립트 객체를 구성하여 사용합니다.

리액트에서 데이터가 변하여 웹 브라우저에 실제 DOM을 업데이트 할 때는 다음 세 가지 절차를 밟습니다.

1. 데이터를 업데이트하면 전체 UI를 Virtual DOM에 리렌더링합니다.
2. 이전 Virtual DOM에 있건 내용과 현재 내용을 비교합니다.
3. 바뀐 부분만 실제 DOM에 적용합니다.


<<오해>>
Virtual DOM을 사용한다고 해서 사용하지 않을 때와 비교하여 무조건 빠른 것은 아닙니다.
리액트 매뉴얼에는 다음 문장이 있습니다.

              우리는 다음 문제를 해결하려고 리액트를 만들었습니다.
          --지속적으로 데이터가 변화하는 대규모 애플리케이션 구축하기--

리액트와 Virtual DOM이 언제나 제공할 수 있는 것은 바로 업데이트 처리 간결성입니다. UI를 업데이트하는 과정에서 생기는 복잡함을 모두 해소하고,
더욱 쉽게 업데이트에 접근할 수 있습니다.